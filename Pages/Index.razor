@using Toolbelt.Blazor.FileDropZone
@using NovelAIPromptBuilder.Models
@using NovelAIPromptParser
@page "/"

<PageTitle>NovelAI prompt builder</PageTitle>

<FileDropZone class="file-drop-zone">

    <h1>NovelAI prompt builder</h1>
    <div class="prompt-area">
        <textarea class="prompt" id="prompt" @bind="Prompt"
        placeholder="Enter your prompt and import / Enter your tags below. "></textarea>
        <button class="btn" type="button" @onclick="Import" tabindex="-1">Import</button>
        <button class="btn" type="button" @onclick="Clear" tabindex="-1">Clear</button>
    </div>

    <div class="column-container">
        <div class="tag-column">
            @if (Tags.Count == 0)
            {
                <button type="button" @onclick="AddTag">Add tag</button>
            }
            else
            {
                <table class="table">
                    <thead>
                    <tr>
                        <th scope="col">Enabled</th>
                        <th scope="col">Tag</th>
                        <th scope="col">Strength</th>
                        <th></th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var item in Tags.Select((value, index) => new { value, index }))
                    {
                        <tr class="body">
                            <input type="hidden" @bind-value="item.value.Id"/>
                            <td>
                                <div class="cell">
                                    <input type="checkbox" id="word-enabled" tabindex="-1" checked="@item.value.Enabled" @oninput="e => OnWordEnableChanging(item.value.Id, e)"/>
                                </div>
                            </td>
                            <td>
                                <div class="cell">
                                    <input class="form-input" type="text" id="word" @bind-value="item.value.Word"
                                           @oninput="e => OnWordChanging(item.value.Id, e)" placeholder="Enter your tag"/>
                                </div>
                            </td>
                            <td>
                                <div class="cell">
                                    <input type="number" id="StrengthLevel" @bind-value="item.value.StrengthLevel"
                                           @oninput="e => OnEmphasisChanging(item.value.Id, e)" tabindex="-1"/>
                                </div>
                            </td>
                            <td>
                                <div class="button-area">
                                    <div>
                                        @if (item.index != 0)
                                        {
                                            <button class="btn" type="button" @onclick="() => MoveUp(item.value)"
                                                    tabindex="-1">
                                                up
                                            </button>
                                        }
                                    </div>
                                    <div>
                                        @if (item.index != Tags.Count() - 1)
                                        {
                                            <button class="btn" type="button" @onclick="() => MoveDown(item.value)"
                                                    tabindex="-1">
                                                down
                                            </button>
                                        }
                                    </div>
                                    <div>
                                        <button class="btn" type="button" @onclick="() => AddTag(item.value)"
                                                tabindex="-1">
                                            add
                                        </button>
                                    </div>
                                    <div>
                                        <button class="btn" type="button" @onclick="() => RemoveTag(item.value)"
                                                tabindex="-1">
                                            remove
                                        </button>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            }
        </div>

        <div class="img-column">
        <InputFile id="uploadFile" OnChange="OnInputFileChange" style="display: none;"/>

        @if (!string.IsNullOrWhiteSpace(base64image))
        {
            <img src="@base64image" alt=""/>
        }
        </div>
    </div>

</FileDropZone>


@code {

    [Inject]
    public IJSRuntime JSRuntime { get; set; }

    private string Prompt { get; set; } = string.Empty;
    private List<Tag> Tags { get; set; } = new List<Tag>();
    private DotNetObjectReference<Index>? dotnetHelper;
    private string base64image = string.Empty;

    private bool _showLoader = false;

    protected override Task OnInitializedAsync()
    {
        for (var i = 0; i < 5; i++)
        {
            Tags.Add(new Tag());
        }

        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        dotnetHelper = DotNetObjectReference.Create(this);
        await JSRuntime.InvokeVoidAsync("PromptHelpers.setDotNetHelper", dotnetHelper);
    }

    private void AddTag()
    {
        var newTag = new Tag();
        Tags.Add(newTag);
    }

    private void AddTag(Tag tag)
    {
        var newTag = new Tag();
        Tags.Insert(Tags.IndexOf(tag) + 1, newTag);
        StateHasChanged();
    }

    private void RemoveTag(Tag target)
    {
        Tags.Remove(target);
        UpdatePrompt();
    }

    private void OnWordChanging(Guid id, ChangeEventArgs e)
    {
        var target = Tags.FirstOrDefault(m => m.Id == id);
        if (target != null) target.Word = e.Value?.ToString();

        UpdatePrompt();
    }

    private void OnEmphasisChanging(Guid id, ChangeEventArgs e)
    {
        var target = Tags.FirstOrDefault(m => m.Id == id);
        if (target != null) target.StrengthLevel = int.Parse(e.Value?.ToString() ?? "0");

        UpdatePrompt();
    }

    private void OnWordEnableChanging(Guid id, ChangeEventArgs e)
    {
        var target = Tags.FirstOrDefault(m => m.Id == id);
        if (target != null) target.Enabled = bool.Parse(e.Value?.ToString() ?? "true");

        UpdatePrompt();
    }

    private void MoveUp(Tag target)
    {
        var idx = Tags.IndexOf(target);

        Tags.Remove(target);
        Tags.Insert(idx - 1, target);

        UpdatePrompt();
    }

    private void MoveDown(Tag target)
    {
        var idx = Tags.IndexOf(target);
        Tags.Remove(target);
        Tags.Insert(idx, target);
    }

    private void UpdatePrompt()
    {
        Prompt = string.Empty;
        foreach (var tag in Tags.Where(tag => tag.Enabled && !string.IsNullOrWhiteSpace(tag.Word)))
        {
            var brackets = tag.StrengthLevel >= 0 ? new[] { '{', '}' } : new[] { '[', ']' };

            Prompt += $"{new string(brackets[0], Math.Abs(tag.StrengthLevel))}{tag.Word}{new string(brackets[1], Math.Abs(tag.StrengthLevel))}, ";
        }
        StateHasChanged();
    }

    private void Import()
    {
        ImportPrompt(Prompt);
    }

    private void ImportPrompt(string prompt)
    {
        Tags.Clear();

        var tags = Parser.DeserializePrompt(prompt);

        foreach (var tag in tags)
        {
            Tags.Add(new Tag
            {
                Enabled = true,
                Word = tag.Word,
                StrengthLevel = tag.Strength
            });
        }
    }

    private void Clear()
    {
        Tags.Clear();
        Prompt = "";
        base64image = "";
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs args)
    {
        _showLoader = true;
        StateHasChanged();
        await JSRuntime.InvokeAsync<string>("loadFile");
    }


    [JSInvokable]
    public void FileToPrompt(string image)
    {
        base64image = image;
        var data = image.Split(',');
        var ms = new MemoryStream(Convert.FromBase64String(data[1]));
        var r = Parser.ParseImage(ms);
        Prompt = r.Prompt;
        ImportPrompt(Prompt);
        _showLoader = false;
        StateHasChanged();
    }

}