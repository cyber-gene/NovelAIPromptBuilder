@using NovelAIPromptBuilder.Models
@page "/"

<PageTitle>NovelAI prompt builder</PageTitle>

<h1>NovelAI prompt builder</h1>
<div class="prompt-area">
    <textarea class="prompt" id="prompt" @bind="_prompt"
        placeholder="Enter your prompt and inport / Enter your tags below. "></textarea>
    <button class="btn" type="button" @onclick="() => ImportPrompt()" tabindex="-1">Import</button>
    <button class="btn" type="button" @onclick="() => Clear()" tabindex="-1">Clear</button>
</div>

<div class="tag-area">
    @if (_tags.Count == 0)
    {
        <button type="button" @onclick="() => AddTag()">Add tag</button>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th scope="col">Tag</th>
                    <th scope="col">Strength</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in _tags.Select((value, index) => new { value, index }))
                {
                    <tr class="body">
                        <input type="hidden" @bind-value="item.value.Id" />
                        <td>
                            <input class="form-input" type="text" id="word" @bind-value="item.value.Word"
                        @oninput="e => OnWordChanging(item.value.Id, e)" placeholder="Enter your tag" />
                        </td>
                        <td>
                            <input type="number" id="StrengthLevel" @bind-value="item.value.StrengthLevel"
                        @oninput="e => OnEmphasisChanging(item.value.Id, e)" tabindex="-1" />
                        </td>
                        <td>
                            <div class="button-area">
                                <div>
                                    @if (item.index != 0)
                                    {
                                        <button class="btn" type="button" @onclick="() => MoveUp(item.value)"
                                tabindex="-1">up</button>
                                    }
                                </div>
                                <div>
                                    @if (item.index != _tags.Count() - 1)
                                    {
                                        <button class="btn" type="button" @onclick="() => MoveDown(item.value)"
                                tabindex="-1">down</button>
                                    }
                                </div>
                                <div>
                                    <button class="btn" type="button" @onclick="() => AddTag(item.value)"
                                tabindex="-1">add</button>
                                </div>
                                <div>
                                    <button class="btn" type="button" @onclick="() => RemoveTag(item.value)"
                                tabindex="-1">remove</button>
                                </div>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {
    private string _prompt { get; set; } = string.Empty;
    private List<Tag> _tags { get; set; } = new List<Tag>();

    protected override Task OnInitializedAsync()
    {
        for (int i = 0; i < 5; i++)
        {
            _tags.Add(new() { });
        }

        return base.OnInitializedAsync();
    }

    private void AddTag()
    {
        var newTag = new Tag();
        _tags.Add(newTag);
    }

    private void AddTag(Tag tag)
    {
        var newTag = new Tag();
        _tags.Insert(_tags.IndexOf(tag) + 1, newTag);
        StateHasChanged();
    }

    private void RemoveTag(Tag target)
    {
        _tags.Remove(target);
        UpdatePrompt();
    }

    private void OnWordChanging(Guid id, ChangeEventArgs e)
    {
        var target = _tags.FirstOrDefault(m => m.Id == id);
        target.Word = e.Value.ToString();

        UpdatePrompt();
    }

    private void OnEmphasisChanging(Guid id, ChangeEventArgs e)
    {
        var target = _tags.FirstOrDefault(m => m.Id == id);
        target.StrengthLevel = int.Parse(e.Value.ToString());

        UpdatePrompt();
    }

    private void MoveUp(Tag target)
    {
        var idx = _tags.IndexOf(target);

        _tags.Remove(target);
        _tags.Insert(idx - 1, target);

        UpdatePrompt();
    }

    private void MoveDown(Tag target)
    {
        var idx = _tags.IndexOf(target);
        _tags.Remove(target);
        _tags.Insert(idx, target);
    }

    private void UpdatePrompt()
    {
        _prompt = string.Empty;
        foreach (var tag in _tags)
        {
            if (string.IsNullOrWhiteSpace(tag.Word))
            {
                continue;
            }

            char[] brackets;
            if (tag.StrengthLevel >= 0)
            {
                brackets = new char[] { '{', '}' };
            }
            else
            {
                brackets = new char[] { '[', ']' };
            }

            _prompt += $"{new string(brackets[0], Math.Abs(tag.StrengthLevel))}{tag.Word}{new string(brackets[1], Math.Abs(tag.StrengthLevel))}, ";
        }
        StateHasChanged();
    }

    private void ImportPrompt()
    {
        _tags.Clear();
        var tags = _prompt.Split(",");

        foreach (var tag in tags)
        {
            if (string.IsNullOrWhiteSpace(tag))
            {
                continue;
            }

            var t = new Tag
            {
                Word = tag.Trim().Replace("{", "").Replace("}", "").Replace("[", "").Replace("]", ""),
                StrengthLevel = tag.Any(c => c == '{') ? tag.Count(c => c == '{') : tag.Count(c => c == '[') * -1
            };
            _tags.Add(t);
        }
    }

    private void Clear()
    {
        _tags.Clear();
        _prompt = "";
    }
}